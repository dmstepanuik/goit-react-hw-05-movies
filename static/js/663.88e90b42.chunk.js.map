{"version":3,"file":"static/js/663.88e90b42.chunk.js","mappings":"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","sources":["components/pages/Reviews/Reviews.jsx","hooks/useFirstRender.js","hooks/useTrendingApi.js"],"sourcesContent":["import { useGetMovieReviews } from 'hooks/useTrendingApi';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function Reviews() {\n  const { id } = useParams();\n  const { loading, reviews, done } = useGetMovieReviews(id);\n\n  if (!loading && !done) return null;\n  if (loading) return <h3>Loading...</h3>;\n  if (!loading && done && reviews.length === 0)\n    return <h4>We don't have any reviews for this movie</h4>;\n  return (\n    <>\n      <h4>Reviews</h4>\n      <ul>\n        {reviews.map(it => {\n          return (\n            <li key={it.id}>\n              <h3>Author: {it.author}</h3>\n              <p> {it.content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n","import { useRef } from 'react';\n\nexport function useIsFirstRender() {\n  const isFirst = useRef(true);\n\n  if (isFirst.current) {\n    isFirst.current = false;\n\n    return true;\n  }\n\n  return isFirst.current;\n}\n","import axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nimport { useIsFirstRender } from './useFirstRender';\n\nconst API_KEY = 'f860fd14767163b7a314379672b23f90';\n\nconst themoviedb = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nexport function useTrendingApi() {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    themoviedb.get('/trending/movie/day').then(res => {\n      setData(res.data.results);\n      setLoading(false);\n    });\n  }, []);\n\n  return [data, loading];\n}\n\nexport function useSearchMovies(initSearch = '') {\n  const [loading, setLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useState(initSearch);\n  const isFirst = useIsFirstRender();\n\n  useEffect(() => {\n    if (isFirst.current || search === '') return;\n\n    const options = {\n      params: {\n        query: search,\n      },\n    };\n\n    setLoading(true);\n    themoviedb.get('/search/movie', options).then(res => {\n      setMovies(res.data.results);\n      setLoading(false);\n    });\n  }, [isFirst, search]);\n  // console.log(movies);\n\n  return { movies, setSearch, loading };\n}\n\nexport function useGetMovieDetails(movieId) {\n  const [loading, setLoading] = useState(false);\n  const [movie, setMovie] = useState({});\n  const [done, setDone] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    themoviedb.get(`/movie/${movieId}`).then(res => {\n      // console.log(res);\n      setMovie(res.data);\n      setDone(true);\n      setLoading(false);\n    });\n  }, [movieId]);\n\n  return { loading, movie, done };\n}\n\nexport function useGetMovieCast(movieId) {\n  const [loading, setLoading] = useState(false);\n  const [cast, setCast] = useState({});\n  const [done, setDone] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    themoviedb.get(`/movie/${movieId}/credits`).then(res => {\n      setCast(res.data.cast);\n      setDone(true);\n      setLoading(false);\n    });\n  }, [movieId]);\n\n  return { loading, cast, done };\n}\n\nexport function useGetMovieReviews(movieId) {\n  const [loading, setLoading] = useState(false);\n  const [reviews, setReviews] = useState({});\n\n  const [done, setDone] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    themoviedb.get(`/movie/${movieId}/reviews`).then(res => {\n      setReviews(res.data.results);\n      // console.log(res.data.results);\n      setDone(true);\n      setLoading(false);\n    });\n  }, [movieId]);\n\n  return { loading, reviews, done };\n}\n"],"names":["Reviews","id","useParams","useGetMovieReviews","loading","reviews","done","length","map","it","author","content","useIsFirstRender","isFirst","useRef","current","themoviedb","axios","baseURL","params","api_key","language","useTrendingApi","useState","setLoading","data","setData","useEffect","get","then","res","results","useSearchMovies","initSearch","movies","setMovies","search","setSearch","options","query","useGetMovieDetails","movieId","movie","setMovie","setDone","useGetMovieCast","cast","setCast","setReviews"],"sourceRoot":""}